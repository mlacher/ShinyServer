{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the\n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(LTSerial)\nlibrary(car)\n\n\nDevice<-Open_Serial(\"COM31\")\n\nRWout<-RW_Serial(Device,'276')\nif (RWout == 20)\n{\n  abc = 0\n}else{\n  abc = NA\n}\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n\n\n  st <- reactiveValues(flag = 0, Breath  = 0)\n\n  observeEvent(input$start, {\n\n       st$flag <- 1\n\n })\n\n  observeEvent(input$stop, {\n      st$flag <- 0\n  })\n\n  observeEvent(st$flag,{\n    if(st$flag==1){\n      print(st$flag)\n      InhTime<-input$slider1*10\n      InhTimec<- as.character(InhTime+255+1)\n      print(InhTimec)\n      RWout<-RW_Serial(Device,'517')\n      Rout <- R_Serial(Device)\n      st$Data <- Meas_Data(Rout)\n      st$Breath<-st$Breath+1\n      st$Wait<- 1\n      st$flag <-0\n     }\n  })\n\n  output$value3 <- renderPrint({ st$Breath})\n  output$plot <- renderPlot({plot(st$Data$Time, st$Data$RotSpeed )})\n  output$summary <- renderPrint({summary(st$Data)})\n  output$table <- renderTable({data })\n\n  eventReactive(st$Wait,{\n    st$Wait<- 0\n    st$flag<-1\n  })\n\n})\n",
    "created" : 1522771849190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3679383294",
    "id" : "A204793",
    "lastKnownWriteTime" : 1523008290,
    "last_content_update" : 1523008291447,
    "path" : "~/LifeTimeUI/server.R",
    "project_path" : null,
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
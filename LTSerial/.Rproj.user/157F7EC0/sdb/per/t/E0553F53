{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the\n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(LTSerial)\nlibrary(car)\n\n\nDevice<-Open_Serial(\"COM31\")\n\nRWout<-RW_Serial(Device,'276')\nif (RWout == 20)\n{\n  Breath = 0\n}else{\n  Breath = NA\n}\nfoo<-\"\"\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  #Start_BTN<-input$start\n\n  v <- reactiveValues()\n  observeEvent(input$start, {\n    if (input$start!=0){\n      v$Breath<-RW_Serial(Device,'517')\n      v$foo <- R_Serial(Device)\n      v$boo <- Meas_Data(v$foo)\n\n    }\n  })\n\n x <- reactiveValues()\n\n  output$value1 <- renderPrint({ input$slider1 })\n  output$value3 <- renderPrint({ v$Breath })\n\n\n  #Breath <-renderPrint({input$start})\n  output$plot <- renderPlot({\n    plot(v$boo$RotSpeed)\n  })\n\n  # Generate a summary of the data ----\n  output$summary <- renderPrint({\n    summary(v$boo)\n  })\n\n  # Generate an HTML table view of the data ----\n  output$table <- renderTable({\n    data\n  })\n\n\n})\n",
    "created" : 1522920780661.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "178660418",
    "id" : "E0553F53",
    "lastKnownWriteTime" : 1522853907,
    "last_content_update" : 1522853907,
    "path" : "~/LifeTimeUI/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}